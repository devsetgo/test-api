# -*- coding: utf-8 -*-
import asyncio
import time

from fastapi import APIRouter, Query
from loguru import logger

from core.gen_user import user_test_info

router = APIRouter()


@router.get("/make-one", tags=["silly users"])
async def make_user(
    delay: int = Query(
        None,
        title="silly users",
        description="Seconds (max 121)",
        ge=1,
        le=20,
        alias="delay",
    )
) -> dict:
    """
    GET one random generate user

    Keyword Arguments:
        delay {int} -- [description] delay (sleep) time from 0 to 121 seconds

    Returns:
        dict -- [description] random generation of user data
    """
    t0 = time.time()
    # sleep if delay option is used
    if delay is not None:
        await asyncio.sleep(delay)

    t1: float = time.time() - t0
    response = {
        "delay_time": delay,
        "delay_timer": f"{t1:.8f}",
        "user_info": user_test_info(),
    }
    logger.info(f"process time: {t1:.8f}")
    return response


@router.get("/list", tags=["silly users"])
async def user_list(
    qty: int = Query(
        ..., title="silly list", description="(max 1000)", ge=1, le=1000, alias="qty"
    ),
    delay: int = Query(
        None,
        title="Delay",
        description="Delay seconds (Max 121)",
        ge=1,
        le=20,
        alias="delay",
    ),
) -> dict:
    """
    GET List of users generated by Silly (https://github.com/classam/silly)
    Keyword Arguments:
        qty {int} -- [description] minimum of 1 and maximum of 1000
        delay {int} -- [description] delay (sleep) time from 0 to 121 seconds

    Returns:
        dict -- [description] random generation of user data
    """
    t0 = time.time()
    result = []

    # sleep if delay option is used
    if delay is not None:
        await asyncio.sleep(delay)

    for _ in range(qty):
        x = user_test_info()
        result.append(x)

    t1: float = time.time() - t0
    response = {"delay_time": delay, "delay_timer": f"{t1:.8f}", "user_info": result}
    logger.info(f"process time: {t1:.8f}")
    return response
